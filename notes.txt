touch .gitignore -> add examples

dotnet --info // installation info
dotnet -h // lists commands
dotnet new // create a new .NET project or file

*** API ***

// Creating the ASP.NET Core solutions and projects using the DotNet CLI
cd reactivities
dotnet new sln // solutiion file inherits name of parent folder
dotnet new classlib -n Domain
dotnet new classlib -n Application
dotnet new classlib -n Persistence
dotnet new webapi -n API

// Creating the project references using the DotNet CLI
dotnet sln add Domain/
dotnet sln add Application/
dotnet sln add Persistence/
dotnet sln add API/
dotnet sln list // lists the solution's project references

// Application requires references to Domain and Persistence
cd Application
dotnet add reference ../Domain/
dotnet add reference ../Persistence/

// API requires reference to Application
dotnet add reference ../Application/

// Persistence requires reference to Domain
cd persistence
dotnet add reference ../Domain/

// Required assets to build and debug are missing
View -> Command Palette -> Generate Assets for Build and Debug
^ Creates a .vscode folder than contains json files for launching and debugging

// Hide bin and obj folders as they are dynamically generated
File -> Preferences -> Settings -> "Exclude" -> Add Pattern
**/bin
**/obj

API/Startup.cs
Line 39 commment out app.UseHttpsRedirection();

API/Properties/launchSettings.json
Line 24 remove https url from "applicationUrl" property value

API/WeatherForecast.cs // Remove
API/Controllers/WeatherForecastController.cs // Remove

API/ is the startup project
dotnet run -p API/

test API routes: 
localhost:5000/api/values
localhost:5000/api/values/1

Create Class Entity inside Domain/

touch Persistence/DataContext.cs
View->Command Palette->Nuget Package Manager - Add Package
Microsoft.EntityFrameworkCore -> 3.0.0
Microsoft.EntityFrameworkCore.Sqlite -> 3.0.0

https://stackoverflow.com/questions/54785951/unable-to-install-packages-using-dotnet-add-package/54798770#54798770

Domain.csproj && Persistence.csproj -> <TargetFramework>netstandard2.1</TargetFramework>

Persistence -> DataContext.cs -> Ctrl + . => using Microsoft.EntityFrameworkCore;

Whenever you create a new class in Domain/ you need to add the DBSet property inside DataContext.cs - then create a migration to create the new table (once you setup the DB in the following steps)
e.g. dotnet ef migrations add "Activity Entity Created" -p Persistence/ -s API/

e.g. public DbSet<Value> Values { get; set; }

API/Startup.cs

Line 30 ->

services.AddDbContext<DataContext>(opt => {
    opt.UseSqlite(Configuration.GetConnectionString("DefaultConnection"))
});

API/appsettings.json
"ConnectionStrings": {
    "DefaultConnection": "Data source=reactivities.db"
}

dotnet tool install --global dotnet-ef --version 3.0

View->Command Palette->Nuget Package Manager - Add Package
Microsoft.EntityFrameworkCore.Design -> 3.0.0

dotnet ef migrations add Init -p Persistence/ -s API/

// Creating the Database

API/Program

public static void Main(string[] args)
{
    var host = CreateHostBuilder(args).Build();

    using (var scope = host.Services.CreateScope())
    {
        var services = scope.ServiceProvider;
        try
        {
            var context = services.GetRequiredService<DataContext>();
            context.Database.Migrate();
        }
        catch (Exception ex)
        {

            var logger = services.GetRequiredService<ILogger<Program>>();
            logger.LogError(ex, "An Error Occured During Migration");
        }
    }
    host.Run();
}


cd API/
dotnet watch run

View -> Command Palette -> SQLite: Open Database


// Seeding Data Using Entity Framework

Persistence/DataContext.cs

protected override void OnModelCreating(ModelBuilder builder)
{
    builder.Entity<Value>().HasData(new Value { Id = 1, Name = "Value 101" }),
    builder.Entity<Value>().HasData(new Value { Id = 2, Name = "Value 102" }),
    builder.Entity<Value>().HasData(new Value { Id = 3, Name = "Value 103" })
}

dotnet ef migrations add SeedValues -p Persistence/ -s API/


// Using Dependency Injection

API/Controllers/ValuesController

private readonly DataContext _context;
public ValuesController(DataContext context)
{
    this._context = context;
}

Update the Controller methods


*** CLIENT ***
npx create-react-app client --use-npm --typescript
In order to make API requests you need to run:
cd API ->  dotnet watch run in a terminal window

// Adding CORS support to the API
API/Startup.cs

services.AddCors(opt =>
{
    opt.AddPolicy("CorsPolicy", policy =>
    {
        policy.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:3000")
    })
});

AND

app.UseCors("CorsPolicy");
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
})
^ The ordering of the middleware is important!

// Materialize
cd client
npm i materialize-css@next 
npm i @types/materialize-css
declare const M;
index.js -> import 'materialize-css/dist/css/materialize.min.css'

// Seeding Data
Persistance/Seed.cs
The Id field will be dynamically generated by EntityFramework
We want to run the SeedData command when the application starts up
API/Program.cs
Seed.SeedData(context);

// Creating Query Handlers
View->Command Palette->Nuget Package Manager - Add Package
Microsoft.EntityFrameworkCore -> 3.0.0
MediatR.Extensions.Microsoft.DependencyInjection
Restore
e.g. Application/Activities/List.cs

// Creating API Controllers
cd API/Controlllers
touch ActivitiesController
We inject MediatR into the API controller so we have to register it as a service inside Startup.cs

// using Application.Activities;
services.AddMediatR(typeof(List.Handler).Assembly);

 once we have told it about where to locate a single handler it does not need to be told about the others - which is a good thing as we add a lot of Handlers

 // Intefaces
 An interface is defined as a syntactical contract that all the classes inheriting the interface should follow. The interface defines the 'what' part of the syntactical contract and the deriving classes define the 'how' part of the syntactical contract.Interfaces define properties, methods, and events, which are the members of the interface. Interfaces contain only the declaration of the members. It is the responsibility of the deriving class to define the members. It often helps in providing a standard structure that the deriving classes would follow.

 // Postman Create Route
 {
	"id": "{{$guid}}", // Special Postman Object
	"title": "Test Create Activity",
	"description": "Description of the test event",
	"category": "Culture",
	"date": "{{activityDate}}",
	"city": "London",
	"venue": "Tower of London"
}

** CLIENT API **
mkdir /src/api